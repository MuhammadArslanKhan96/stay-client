generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Hotel {
  id           String     @id @default(cuid())
  name         String     @unique
  city         String
  image        String[]
  rating       Float
  rating_count Int
  packages     String[]
  description  String
  bookings     Booking[]
  contact      Contact?
  Favorite     Favorite[]
  reviews      Review[]
  room         Room[]
}

model Contact {
  id      String @id @default(cuid())
  number  String
  email   String
  hotelId String @unique
  hotel   Hotel  @relation(fields: [hotelId], references: [id], onDelete: Cascade)
}

model Room {
  id           String    @id @default(cuid())
  name         String
  people       Int
  size         Int
  beds         Int
  bathroom     Int
  image        String
  available    Boolean
  price        Int
  rating       Float
  rating_count Int
  package      String
  hotelId      String
  bookings     Booking[]
  reviews      Review[]
  hotel        Hotel     @relation(fields: [hotelId], references: [id], onDelete: Cascade)
}

model Review {
  id        String  @id @default(cuid())
  title     String
  message   String
  rating    Float
  hotelId   String
  roomId    String
  bookingId String  @unique
  userId    String
  booking   Booking @relation(fields: [bookingId], references: [id])
  hotel     Hotel   @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  room      Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id])
}

model User {
  id           String     @id @default(cuid())
  email        String     @unique
  wallet       String?
  username     String?    @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  referralCode String?    @unique @db.VarChar(255)
  referredBy   String?    @db.VarChar(255)
  bookings     Booking[]
  Favorite     Favorite[]
  reviews      Review[]
  User         User?      @relation("UserToUser", fields: [referredBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "referredBy_fkey")
  other_User   User[]     @relation("UserToUser")
}

model Booking {
  id              String   @id @default(cuid())
  userId          String
  roomId          String
  hotelId         String
  reviewId        String?
  createdAt       DateTime @default(now())
  startTime       DateTime
  endTime         DateTime
  duration        Int
  price           Int
  transactionHash String
  hotel           Hotel    @relation(fields: [hotelId], references: [id])
  room            Room     @relation(fields: [roomId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
  review          Review?
}

model EarlyAccess {
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  code      Int      @unique
  isUsed    Boolean  @default(false)
  id        Int      @id @default(autoincrement())
}

model Favorite {
  id        String   @id
  userId    String
  hotelId   String
  createdAt DateTime @default(now())
  userEmail String
  Hotel     Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, hotelId])
}

model BookedProperties {
  id         String    @id @default(dbgenerated("gen_random_uuid()"))
  userId     String
  propertyId String
  startDate  DateTime  @db.Timestamp(6)
  endDate    DateTime  @db.Timestamp(6)
  language   String?
  currency   String?
  createdAt  DateTime? @default(now()) @db.Timestamp(6)
  updatedAt  DateTime? @default(now()) @db.Timestamp(6)
}

model Hotels {
  id                    String  @id @default(dbgenerated("(gen_random_uuid())::text"))
  name                  String
  chainCode             String?
  accommodationTypeCode String?
  categoryCode          String?
  categoryGroupCode     String?
  description           String?
  giataCode             Int?
  countryCode           String?
  cityCode              String?
  postalCode            String?
  latitude              Float?
  longitude             Float?
  phoneNumber           String?
  email                 String?
  website               String?
  ranking               Int?
  lastUpdate            String?
  license               String?
  hotelCode             Int?    @unique
}
