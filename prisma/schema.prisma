generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Hotel {
  id           String     @id @default(cuid())
  name         String     @unique
  city         String
  image        String[]
  rating       Float
  rating_count Int
  packages     String[]
  description  String
  bookings     Booking[]
  contact      Contact?
  Favorite     Favorite[]
  reviews      Review[]
  room         Room[]
}

model Contact {
  id      String @id @default(cuid())
  number  String
  email   String
  hotelId String @unique
  hotel   Hotel  @relation(fields: [hotelId], references: [id], onDelete: Cascade)
}

model Room {
  id           String    @id @default(cuid())
  name         String
  people       Int
  size         Int
  beds         Int
  bathroom     Int
  image        String
  available    Boolean
  price        Int
  rating       Float
  rating_count Int
  package      String
  hotelId      String
  bookings     Booking[]
  reviews      Review[]
  hotel        Hotel     @relation(fields: [hotelId], references: [id], onDelete: Cascade)
}

model Review {
  id        String  @id @default(cuid())
  title     String
  message   String
  rating    Float
  hotelId   String
  roomId    String
  bookingId String  @unique
  userId    String
  booking   Booking @relation(fields: [bookingId], references: [id])
  hotel     Hotel   @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  room      Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id])
}

model User {
  id           String     @id @default(cuid())
  email        String     @unique
  wallet       String?
  username     String?    @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  referralCode String?    @unique @db.VarChar(255)
  referredBy   String?    @db.VarChar(255)
  bookings     Booking[]
  Favorite     Favorite[]
  reviews      Review[]
  User         User?      @relation("UserToUser", fields: [referredBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "referredBy_fkey")
  other_User   User[]     @relation("UserToUser")
}

model Booking {
  id              String   @id @default(cuid())
  userId          String
  roomId          String
  hotelId         String
  reviewId        String?
  createdAt       DateTime @default(now())
  startTime       DateTime
  endTime         DateTime
  duration        Int
  price           Int
  transactionHash String
  hotel           Hotel    @relation(fields: [hotelId], references: [id])
  room            Room     @relation(fields: [roomId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
  review          Review?
}

model EarlyAccess {
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  code      Int      @unique
  isUsed    Boolean  @default(false)
  id        Int      @id @default(autoincrement())
}

model Favorite {
  id        String   @id
  userId    String
  hotelId   String
  createdAt DateTime @default(now())
  userEmail String
  Hotel     Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, hotelId])
}

model BookedProperties {
  id         String    @id @default(dbgenerated("gen_random_uuid()"))
  userId     String
  propertyId String
  startDate  DateTime  @db.Timestamp(6)
  endDate    DateTime  @db.Timestamp(6)
  language   String?
  currency   String?
  createdAt  DateTime? @default(now()) @db.Timestamp(6)
  updatedAt  DateTime? @default(now()) @db.Timestamp(6)
}

model api_hotel_board_codes {
  id         Int         @id @default(autoincrement())
  hotel_code Int?
  board_code String      @db.VarChar(5)
  created_at DateTime?   @default(now()) @db.Timestamptz(6)
  api_hotels api_hotels? @relation(fields: [hotel_code], references: [code], onDelete: Cascade, onUpdate: NoAction)

  @@index([hotel_code], map: "idx_api_hotel_board_codes_hotel_code")
}

model api_hotel_facilities {
  id                  Int         @id @default(autoincrement())
  hotel_code          Int?
  facility_code       Int
  facility_group_code Int
  facility_order      Int?
  number              Int?
  time_from           String?
  time_to             String?
  voucher             Boolean?    @default(false)
  created_at          DateTime?   @default(now()) @db.Timestamptz(6)
  api_hotels          api_hotels? @relation(fields: [hotel_code], references: [code], onDelete: Cascade, onUpdate: NoAction)

  @@index([hotel_code], map: "idx_api_hotel_facilities_hotel_code")
}

model api_hotel_images {
  id                  Int         @id @default(autoincrement())
  hotel_code          Int?
  image_type_code     String?     @db.VarChar(10)
  path                String
  image_order         Int?
  visual_order        Int?
  room_code           String?     @db.VarChar(20)
  room_type           String?     @db.VarChar(20)
  characteristic_code String?     @db.VarChar(20)
  created_at          DateTime?   @default(now()) @db.Timestamptz(6)
  api_hotels          api_hotels? @relation(fields: [hotel_code], references: [code], onDelete: Cascade, onUpdate: NoAction)

  @@index([hotel_code], map: "idx_api_hotel_images_hotel_code")
  @@index([room_code], map: "idx_api_hotel_images_room_code")
}

model api_hotel_issues {
  id          Int         @id @default(autoincrement())
  hotel_code  Int?
  issue_code  String?     @db.VarChar(20)
  issue_type  String?     @db.VarChar(20)
  date_from   String?
  date_to     String?
  issue_order Int?
  alternative Boolean?    @default(false)
  created_at  DateTime?   @default(now()) @db.Timestamptz(6)
  api_hotels  api_hotels? @relation(fields: [hotel_code], references: [code], onDelete: Cascade, onUpdate: NoAction)

  @@index([hotel_code], map: "idx_api_hotel_issues_hotel_code")
}

model api_hotel_phones {
  id           Int         @id @default(autoincrement())
  hotel_code   Int?
  phone_number String      @db.VarChar(20)
  phone_type   String      @db.VarChar(20)
  created_at   DateTime?   @default(now()) @db.Timestamptz(6)
  api_hotels   api_hotels? @relation(fields: [hotel_code], references: [code], onDelete: Cascade, onUpdate: NoAction)

  @@index([hotel_code], map: "idx_api_hotel_phones_hotel_code")
}

model api_hotel_rooms {
  id                  Int              @id @default(autoincrement())
  hotel_code          Int?
  room_code           String           @db.VarChar(20)
  is_parent_room      Boolean?         @default(false)
  min_pax             Int?
  max_pax             Int?
  max_adults          Int?
  max_children        Int?
  min_adults          Int?
  room_type           String?          @db.VarChar(20)
  characteristic_code String?          @db.VarChar(20)
  created_at          DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?        @default(now()) @db.Timestamptz(6)
  api_bookings        api_bookings[]
  api_hotels          api_hotels?      @relation(fields: [hotel_code], references: [code], onDelete: Cascade, onUpdate: NoAction)
  api_room_stays      api_room_stays[]

  @@index([hotel_code], map: "idx_api_hotel_rooms_hotel_code")
}

model api_hotel_segment_codes {
  id           Int         @id @default(autoincrement())
  hotel_code   Int?
  segment_code Int
  created_at   DateTime?   @default(now()) @db.Timestamptz(6)
  api_hotels   api_hotels? @relation(fields: [hotel_code], references: [code], onDelete: Cascade, onUpdate: NoAction)

  @@index([hotel_code], map: "idx_api_hotel_segment_codes_hotel_code")
}

model api_hotels {
  id                      Int                       @id @default(autoincrement())
  code                    Int                       @unique
  name_content            String
  description_content     String?
  country_code            String?                   @db.VarChar(5)
  state_code              String?                   @db.VarChar(5)
  destination_code        String?                   @db.VarChar(10)
  zone_code               Int?
  longitude               Decimal?                  @db.Decimal(10, 6)
  latitude                Decimal?                  @db.Decimal(10, 6)
  category_code           String?                   @db.VarChar(10)
  category_group_code     String?                   @db.VarChar(10)
  chain_code              String?                   @db.VarChar(10)
  accommodation_type_code String?                   @db.VarChar(5)
  address_content         String?
  address_street          String?
  postal_code             String?                   @db.VarChar(20)
  city_content            String?
  email                   String?                   @db.VarChar(255)
  giata_code              Int?
  web                     String?
  last_update             String?
  s2c                     String?                   @db.VarChar(10)
  ranking                 Int?
  created_at              DateTime?                 @default(now()) @db.Timestamptz(6)
  updated_at              DateTime?                 @default(now()) @db.Timestamptz(6)
  api_bookings            api_bookings[]
  api_hotel_board_codes   api_hotel_board_codes[]
  api_hotel_facilities    api_hotel_facilities[]
  api_hotel_images        api_hotel_images[]
  api_hotel_issues        api_hotel_issues[]
  api_hotel_phones        api_hotel_phones[]
  api_hotel_rooms         api_hotel_rooms[]
  api_hotel_segment_codes api_hotel_segment_codes[]
  api_interest_points     api_interest_points[]
  api_wildcards           api_wildcards[]
}

model api_interest_points {
  id                  Int         @id @default(autoincrement())
  hotel_code          Int?
  facility_code       Int?
  facility_group_code Int?
  point_order         Int?
  poi_name            String?
  distance            String?
  created_at          DateTime?   @default(now()) @db.Timestamptz(6)
  api_hotels          api_hotels? @relation(fields: [hotel_code], references: [code], onDelete: Cascade, onUpdate: NoAction)

  @@index([hotel_code], map: "idx_api_interest_points_hotel_code")
}

model api_room_stays {
  id              Int              @id @default(autoincrement())
  room_id         Int?
  stay_type       String?          @db.VarChar(20)
  stay_order      String?          @db.VarChar(10)
  description     String?
  created_at      DateTime?        @default(now()) @db.Timestamptz(6)
  api_hotel_rooms api_hotel_rooms? @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([room_id], map: "idx_api_room_stays_room_id")
}

model api_wildcards {
  id                             Int         @id @default(autoincrement())
  hotel_code                     Int?
  room_type                      String?     @db.VarChar(20)
  room_code                      String?     @db.VarChar(20)
  characteristic_code            String?     @db.VarChar(20)
  hotel_room_description_content String?
  created_at                     DateTime?   @default(now()) @db.Timestamptz(6)
  api_hotels                     api_hotels? @relation(fields: [hotel_code], references: [code], onDelete: Cascade, onUpdate: NoAction)

  @@index([hotel_code], map: "idx_api_wildcards_hotel_code")
}

model api_bookings {
  id               Int             @id @default(autoincrement())
  reference        String          @unique @db.VarChar(50)
  client_reference String?         @db.VarChar(50)
  hotel_id         Int
  room_id          Int
  rate_key         String          @db.VarChar(255)
  check_in         DateTime        @db.Date
  check_out        DateTime        @db.Date
  total_amount     Decimal         @db.Decimal(10, 2)
  currency         String          @default("USD") @db.VarChar(3)
  holder_name      String          @db.VarChar(100)
  holder_surname   String          @db.VarChar(100)
  holder_email     String?         @db.VarChar(100)
  holder_phone     String?         @db.VarChar(20)
  status           String          @default("confirmed") @db.VarChar(20)
  payment_status   String?         @default("pending") @db.VarChar(20)
  payment_method   String?         @db.VarChar(50)
  supplier_data    Json?
  user_id          String          @db.VarChar(30)
  created_at       DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?       @default(now()) @db.Timestamptz(6)
  api_hotels       api_hotels      @relation(fields: [hotel_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  api_hotel_rooms  api_hotel_rooms @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([check_in, check_out], map: "idx_api_bookings_dates")
  @@index([user_id], map: "idx_api_bookings_user_id")
}
